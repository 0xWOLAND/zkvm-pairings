use crate::{
    common::Bls12381Curve, fp::Fp, fp12::Fp12, fp2::Fp2, fp6::Fp6, g1::G1Affine, g2::G2Affine,
};
use num_bigint::{BigInt, BigUint};
use std::str::FromStr;

// const BLS_S: u8 = 2;

// // p = 5044125407647214251
// const BLS_P: u64 = 0x4600_5555_5555_aaab;

// // p^12
// const BLS_P_12: &str = "271287951493331054216203954317970671853614298719053246459320624084466513613002446738951229227112346821205122843866916274880448596929078281803518339327194208026341217588466302380113683133927692384869984552794996875450399946001";

// // h3
// const BLS_H3: &str = "2366356426548243601069753987687709088104621721678962410379583120840019275952471579477684846670499039076873213559162845121989217658133790336552276567078487633052653005423051750848782286407340332979263075575489766963251914185767058009683318020965829271737924625612375201545022326908440428522712877494557944965298566001441468676802477524234094954960009227631543471415676620753242466901942121887152806837594306028649150255258504417829961387165043999299071444887652375514277477719817175923289019181393803729926249507024121957184340179467502106891835144220611408665090353102353194448552304429530104218473070114105759487413726485729058069746063140422361472585604626055492939586602274983146215294625774144156395553405525711143696689756441298365274341189385646499074862712688473936093315628166094221735056483459332831845007196600723053356837526749543765815988577005929923802636375670820616189737737304893769679803809426304143627363860243558537831172903494450556755190448279875942974830469855835666815454271389438587399739607656399812689280234103023464545891697941661992848552456326290792224091557256350095392859243101357349751064730561345062266850238821755009430903520645523345000326783803935359711318798844368754833295302563158150573540616830138810935344206231367357992991289265295323280";

// h
const BLS_H: &str = "322277361516934140462891564586510139908379969514828494218366688025288661041104682794998680497580008899973249814104447692778988208376779573819485263026159588510513834876303014016798809919343532899164848730280942609956670917565618115867287399623286813270357901731510188149934363360381614501334086825442271920079363289954510565375378443704372994881406797882676971082200626541916413184642520269678897559532260949334760604962086348898118982248842634379637598665468817769075878555493752214492790122785850202957575200176084204422751485957336465472324810982833638490904279282696134323072515220044451592646885410572234451732790590013479358343841220074174848221722017083597872017638514103174122784843925578370430843522959600095676285723737049438346544753168912974976791528535276317256904336520179281145394686565050419250614107803233314658825463117900250701199181529205942363159325765991819433914303908860460720581408201373164047773794825411011922305820065611121544561808414055302212057471395719432072209245600258134364584636810093520285711072578721435517884103526483832733289802426157301542744476740008494780363354305116978805620671467071400711358839553375340724899735460480144599782014906586543813292157922220645089192130209334926661588737007768565838519456601560804957985667880395221049249803753582637708560";

// $\lambda$
const BLS_LAMBDA: [u64; 8] = [
    0x0000000000000400,
    0x2409555221667393,
    0x4177898257359041,
    0x5655688281993900,
    0x7885332058136124,
    0x0316504908378644,
    0x4268762912903079,
    0x6414117214202539,
];

// // k
// const BLS_K: &str = "76329603384216526031706109802092473003";

// h3 * 27
const BLS_H3_TIMES_27: [u64; 80] = [
    0x6389162351680257,
    0x7228883357667568,
    0x1453788247864853,
    0x3198508024874426,
    0x2680520450716732,
    0x6458974908601034,
    0x7405507557676609,
    0x7396818293708876,
    0x7696123390869114,
    0x6731111916609242,
    0x1631146422397272,
    0x9171217329981889,
    0x9044010304053822,
    0x3708007801683015,
    0x7105662614495865,
    0x6607739033692396,
    0x4891534130441715,
    0x6028265278915701,
    0x1324769235306451,
    0x4063061282038919,
    0x6542736668931543,
    0x2056378392024914,
    0x6051673728223268,
    0x7603375466063524,
    0x3729095312578461,
    0x5046262773527056,
    0x8919796192814089,
    0x5745345618798107,
    0x4929011966614138,
    0x8854918984350637,
    0x4992880351789763,
    0x2700708008736689,
    0x6512928439771848,
    0x4562255688607954,
    0x8893956508033957,
    0x4395337635362501,
    0x1091221959731281,
    0x3898772893080855,
    0x5061601706151146,
    0x8456788314370479,
    0x1403759759811324,
    0x9034983093688382,
    0x6142454494781295,
    0x4895901892222679,
    0x9419491942008798,
    0x1062342391505586,
    0x2407212113412455,
    0x4750212932425887,
    0x9627451952196048,
    0x4543986846525053,
    0x4019864598151943,
    0x0821952244063461,
    0x3222237681677031,
    0x6915791601079426,
    0x7118214311215663,
    0x7122918907232131,
    0x7813547028545102,
    0x1187793882422657,
    0x6080521441668394,
    0x3501650323901421,
    0x0355665046032042,
    0x2686107563004017,
    0x2653275148418597,
    0x9296940672279494,
    0x2610566320781633,
    0x5427390758444248,
    0x7380691091632080,
    0x9851390050472045,
    0x9214525756071995,
    0x6373664844327874,
    0x7725156316681204,
    0x9564481873852546,
    0x3439505742913031,
    0x5008823162706254,
    0x7122056075687979,
    0x5638049897316920,
    0x5270065485596654,
    0x4137478952542935,
    0x6824691866581076,
    0x4810162973728560,
];

// h3 * p
const BLS_H3_TIMES_P: [u64; 82] = [
    0x0000000000000011,
    0x9361985747012644,
    0x6158857646616704,
    0x2218828887759808,
    0x4627488283958527,
    0x8846892744832158,
    0x4999951129540000,
    0x3296286388820038,
    0x6843306588845216,
    0x2102947178499454,
    0x1861540588337227,
    0x3462504825977839,
    0x9955922938649366,
    0x6357351381585534,
    0x2999839521916909,
    0x6967254343977763,
    0x8254375285317741,
    0x3820408104259016,
    0x1605940059796345,
    0x7069194608248859,
    0x2886530703535224,
    0x3162051053470532,
    0x3331437558073289,
    0x8803596600743061,
    0x2663570858690463,
    0x7136918110207234,
    0x1707219758372610,
    0x9706901811041443,
    0x7869941716436902,
    0x8143205440065811,
    0x3921427981250082,
    0x0182514860291055,
    0x6307250278519170,
    0x6822386027832813,
    0x2346839063824004,
    0x0677161624040386,
    0x2195655412382336,
    0x0190822238685775,
    0x0544020039156423,
    0x8953066318148647,
    0x3836423644896323,
    0x7684623043414878,
    0x0873995259912537,
    0x5593768193624016,
    0x2687327297892013,
    0x0479985188728751,
    0x3231013722014202,
    0x4239826551529536,
    0x9510797353158382,
    0x1206260865377844,
    0x1782019980320611,
    0x2978490763485474,
    0x1938264688453875,
    0x2288519447041478,
    0x4501081701569005,
    0x9009542959933123,
    0x6719644106890595,
    0x2614126229680487,
    0x5573249553639041,
    0x1155267799333576,
    0x3374872020807719,
    0x0390852671132396,
    0x8132294192860034,
    0x2429639190161651,
    0x2828448182785291,
    0x0041009550820131,
    0x5477189019499401,
    0x2123440667565243,
    0x4450158312876814,
    0x8462769643087196,
    0x4858140298378026,
    0x4692857039671699,
    0x4057532420026848,
    0x1383503881535036,
    0x9563018172542754,
    0x8640450293415579,
    0x4477478566744198,
    0x1209857736062991,
    0x7354290315535429,
    0x6874372206661358,
    0x4742204522404628,
    0x9027910468063280,
];

const BLS_H3_TIMES_P_STR: &str = "11936198574701264461588576466167042218828887759808462748828395852788468927448321584999951129540000329628638882003868433065888452162102947178499454186154058833722734625048259778399955922938649366635735138158553429998395219169096967254343977763825437528531774138204081042590161605940059796345706919460824885928865307035352243162051053470532333143755807328988035966007430612663570858690463713691811020723417072197583726109706901811041443786994171643690281432054400658113921427981250082018251486029105563072502785191706822386027832813234683906382400406771616240403862195655412382336019082223868577505440200391564238953066318148647383642364489632376846230434148780873995259912537559376819362401626873272978920130479985188728751323101372201420242398265515295369510797353158382120626086537784417820199803206112978490763485474193826468845387522885194470414784501081701569005900954295993312367196441068905952614126229680487557324955363904111552677993335763374872020807719039085267113239681322941928600342429639190161651282844818278529100410095508201315477189019499401212344066756524344501583128768148462769643087196485814029837802646928570396716994057532420026848138350388153503695630181725427548640450293415579447747856674419812098577360629917354290315535429687437220666135847422045224046289027910468063280";

// v = 27 * h3
// v_inv = pow(v, -1, p)
// NEG_V_INV_MOD_P = (-v_inv) % p
const NEG_V_INV_MOD_P: [u64; 2] = [0x0000000000000238, 0x1948109166740063];

const H3_ORD_ELEMENT_POW: [u64; 80] = [
    0x0183164133562062,
    0x3066030493719814,
    0x7505057303534692,
    0x3260740898413663,
    0x6587602798828541,
    0x0963156177873376,
    0x6058089659632699,
    0x8534644457004429,
    0x7459229082331438,
    0x9167276498841495,
    0x0129738729858091,
    0x1582055555659026,
    0x2054721744763102,
    0x4516567208419316,
    0x9114414525061661,
    0x2458217576141792,
    0x7641295939217754,
    0x8400378296112557,
    0x0908715827924295,
    0x7940625143296408,
    0x8197491432958568,
    0x3142662836901768,
    0x5600998542951914,
    0x3424033970191369,
    0x6663688808240192,
    0x0580506454124412,
    0x3010328827124649,
    0x8155930265528056,
    0x3177865634616387,
    0x1412976225952447,
    0x8462159453421405,
    0x2542425250197179,
    0x1498070063355382,
    0x6557487250346909,
    0x7186776521644002,
    0x1114333996509096,
    0x4188531886646093,
    0x6246236243529502,
    0x7906615319481144,
    0x3638411934793126,
    0x2823673992912046,
    0x7786047674970854,
    0x0755547431340771,
    0x2735307333317882,
    0x9306395121249991,
    0x0353657234343612,
    0x6871997578016786,
    0x4886937233394096,
    0x8745311413478422,
    0x7807901874533332,
    0x5461128244175733,
    0x2725668983593683,
    0x9706774393384112,
    0x3527094584396839,
    0x3332701361996209,
    0x8977697684860933,
    0x9183392865532143,
    0x8982856670167684,
    0x7442687594385334,
    0x7482803004679093,
    0x2272786338280879,
    0x5828794016038705,
    0x7180953232094138,
    0x1996371579746989,
    0x5587732751744906,
    0x7604241737671795,
    0x4631245773413610,
    0x9353976884272162,
    0x8674176511643774,
    0x8619141831575896,
    0x5239169722140695,
    0x3185406468801987,
    0x2765774060376288,
    0x2647173358897627,
    0x5865065793496818,
    0x2469280843921305,
    0x4305286657596509,
    0x9715588059039629,
    0x7786366024251037,
    0x7179301897268259,
];

fn is_pth_residue(x: &Fp12<Bls12381Curve>) -> bool {
    x.pow_vartime_extended(&BLS_H3_TIMES_27) == Fp12::<Bls12381Curve>::one()
}

fn get_pth_root_inverse(x: &Fp12<Bls12381Curve>) -> Fp12<Bls12381Curve> {
    if is_pth_residue(x) {
        return Fp12::<Bls12381Curve>::one();
    }
    let wj = x.pow_vartime_extended(&BLS_H3_TIMES_27);

    wj.pow_vartime_extended(&NEG_V_INV_MOD_P)
}

fn get_order_of_3rd_primitive_root(x: Fp12<Bls12381Curve>) -> Result<u32, ()> {
    let mut y = x.pow_vartime_extended(&BLS_H3_TIMES_P);

    for i in 0..=3 {
        if y == Fp12::<Bls12381Curve>::one() {
            return Ok(i);
        }
        y = y.pow_vartime_extended(&BLS_H3_TIMES_P);
    }

    Err(())
}

fn get_any_27th_root_inverse(x: Fp12<Bls12381Curve>) -> Fp12<Bls12381Curve> {
    let pw = get_order_of_3rd_primitive_root(x).unwrap();
    if pw == 0 {
        return Fp12::<Bls12381Curve>::one();
    }

    let ord = 3_u32.pow(pw);
    let wj = x.pow_vartime_extended(&BLS_H3_TIMES_P);
    let v_inv = BigInt::from_str(&BLS_H3_TIMES_P_STR)
        .unwrap()
        .modpow(&BigInt::from(-1), &BigInt::from(ord));

    wj.pow_vartime_extended(&v_inv.to_u64_digits().1.as_slice())
}

fn h3_ord_element_lambda_root(x: Fp12<Bls12381Curve>) -> Fp12<Bls12381Curve> {
    x.pow_vartime_extended(&H3_ORD_ELEMENT_POW)
}

pub(crate) fn get_root_and_scaling_factor_bls(
    x: Fp12<Bls12381Curve>,
) -> Result<(Fp12<Bls12381Curve>, Fp12<Bls12381Curve>), (String)> {
    let h = BigUint::from_str(BLS_H).unwrap();
    if x.pow_vartime_extended(h.to_u64_digits().as_slice()) != Fp12::<Bls12381Curve>::one() {
        return Err("expected x^h == 1".to_string());
    }

    let wp_shift = get_pth_root_inverse(&x);
    let w27_shift = get_any_27th_root_inverse(x);

    let w_full = wp_shift * w27_shift;
    let x_shifted = x * w_full;
    let root = h3_ord_element_lambda_root(x_shifted);

    Ok((root, w_full))
}

// #[cfg(test)]
// mod tests {
//     use crate::fr::Fr;

//     use super::*;
//     // use crate::{fast_pairings::miller_loop, multi_miller_loop, G2Affine, Scalar};

//     // r
//     const BLS_R: [u64; 5] = [
//         0x0005243587517512,
//         0x6190479447740508,
//         0x1859658376905525,
//         0x0052763782260365,
//         0x8699938581184513,
//     ];

//     #[test]
//     fn test_r_residue_test() {
//         // let a1 = G1Affine::identity();
//         // let b1 = G2Affine::generator();

//         let a2 = G1Affine::from(
//             G1Affine::generator() * Scalar::from_raw([1, 2, 3, 4]).invert().unwrap().square(),
//         );
//         let b2 = G2Affine::from(
//             G2Affine::generator() * Scalar::from_raw([4, 2, 2, 4]).invert().unwrap().square(),
//         );

//         // let a3 = G1Affine::identity();
//         // let b3 = G2Affine::from(
//         //     G2Affine::generator() * Scalar::from_raw([9, 2, 2, 4]).invert().unwrap().square(),
//         // );

//         // let a4 = G1Affine::from(
//         //     G1Affine::generator() * Scalar::from_raw([5, 5, 5, 5]).invert().unwrap().square(),
//         // );
//         // let b4 = G2Affine::identity();

//         let a5 = G1Affine::from(
//             G1Affine::<Bls12381Curve>::generator()
//                 * Fr::from_raw([323, 32, 3, 1]).invert().unwrap().square(),
//         );
//         let b5 = G2Affine::from(
//             G2Affine::<Bls12381Curve>::generator()
//                 * Fr::from_raw([4, 2, 2, 9099]).invert().unwrap().square(),
//         );

//         // let a = [a1, a2, a3, a5];
//         // let b = [b1, b2, b3, b5];
//         let a = [a2, a5];
//         let b = [b2, b5];

//         for (a, b) in a.iter().zip(b.iter()) {
//             // let x = multi_miller_loop(&[(a, &b.into())]).0;
//             let x = miller_loop(a, b);
//             let x_r = x.pow_vartime_extended(&BLS_R);
//             let (root, w_full) = get_root_and_scaling_factor_bls(x_r).unwrap();

//             assert_eq!(root.pow_vartime_extended(&BLS_LAMBDA), x * w_full);
//         }
//     }
// }
